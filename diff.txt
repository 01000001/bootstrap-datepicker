diff --git a/js/bootstrap-datepicker.js b/js/bootstrap-datepicker.js
index 3f81949..18d7af3 100644
--- a/js/bootstrap-datepicker.js
+++ b/js/bootstrap-datepicker.js
@@ -22,9 +22,7 @@
 
 	// Picker object
 
-	var Datepicker = function(element, options) {
-        var that = this;
-
+	var Datepicker = function(element, options){
 		this.element = $(element);
 		this.language = options.language||this.element.data('date-language')||"en";
 		this.language = this.language in dates ? this.language : "en";
@@ -32,7 +30,8 @@
 		this.picker = $(DPGlobal.template)
 							.appendTo('body')
 							.on({
-								click: $.proxy(this.click, this)								
+								click: $.proxy(this.click, this),
+								mousedown: $.proxy(this.mousedown, this)
 							});
 		this.isInput = this.element.is('input');
 		this.component = this.element.is('.date') ? this.element.find('.add-on') : false;
@@ -41,7 +40,8 @@
 
 		if (this.isInput) {
 			this.element.on({
-				focus: $.proxy(this.show, this),				
+				focus: $.proxy(this.show, this),
+				blur: $.proxy(this._hide, this),
 				keyup: $.proxy(this.update, this),
 				keydown: $.proxy(this.keydown, this)
 			});
@@ -49,24 +49,22 @@
 			if (this.component){
 				// For components that are not readonly, allow keyboard nav
 				this.element.find('input').on({
-					focus: $.proxy(this.show, this),					
+					focus: $.proxy(this.show, this),
+					blur: $.proxy(this._hide, this),
 					keyup: $.proxy(this.update, this),
 					keydown: $.proxy(this.keydown, this)
 				});
 
-				this.component.on('click', $.proxy(this.show, this));				
+				this.component.on('click', $.proxy(this.show, this));
+				var element = this.element.find('input');
+				element.on({
+					blur: $.proxy(this._hide, this)
+				})
 			} else {
 				this.element.on('click', $.proxy(this.show, this));
 			}
 		}
 
-        $(document).on('mousedown', function (e) {
-            // Clicked outside the datepicker, hide it
-            if ($(e.target).closest('.datepicker').length == 0) {                    
-                that.hide();
-            }
-        });
-
 		this.autoclose = false;
 		if ('autoclose' in options) {
 			this.autoclose = options.autoclose;
@@ -119,6 +117,7 @@
 			this.place();
 			$(window).on('resize', $.proxy(this.place, this));
 			if (e ) {
+				e.stopPropagation();
 				e.preventDefault();
 			}
 			if (!this.isInput) {
@@ -130,6 +129,31 @@
 			});
 		},
 
+		_hide: function(e){
+			// When going from the input to the picker, IE handles the blur/click
+			// events differently than other browsers, in such a way that the blur
+			// event triggers a hide before the click event can stop propagation.
+			if ($.browser.msie) {
+				var t = this, args = arguments;
+
+				function cancel_hide(){
+					clearTimeout(hide_timeout);
+					e.target.focus();
+					t.picker.off('click', cancel_hide);
+				}
+
+				function do_hide(){
+					t.hide.apply(t, args);
+					t.picker.off('click', cancel_hide);
+				}
+
+				this.picker.on('click', cancel_hide);
+				var hide_timeout = setTimeout(do_hide, 100);
+			} else {
+				return this.hide.apply(this, arguments);
+			}
+		},
+
 		hide: function(e){
 			this.picker.hide();
 			$(window).off('resize', this.place);
@@ -368,6 +392,7 @@
 		},
 
 		click: function(e) {
+			e.stopPropagation();
 			e.preventDefault();
 			var target = $(e.target).closest('span, td, th');
 			if (target.length == 1) {
@@ -452,7 +477,7 @@
 							if (element) {
 								element.change();
 								if (this.autoclose) {
-									this.hide();
+									element.blur();
 								}
 							}
 						}
@@ -461,6 +486,11 @@
 			}
 		},
 
+		mousedown: function(e){
+			e.stopPropagation();
+			e.preventDefault();
+		},
+
 		moveMonth: function(date, dir){
 			if (!dir) return date;
 			var new_date = new Date(date.valueOf()),
@@ -577,9 +607,6 @@
 					this.hide();
 					e.preventDefault();
 					break;
-                case 9: // tab                    
-                    this.hide();
-                    break;
 			}
 			if (dateChanged){
 				this.element.trigger({
diff --git a/tests/suites/keyboard_navigation/2012.js b/tests/suites/keyboard_navigation/2012.js
index f49c3ea..9462e87 100644
--- a/tests/suites/keyboard_navigation/2012.js
+++ b/tests/suites/keyboard_navigation/2012.js
@@ -1,410 +1,417 @@
-module('Keyboard Navigation 2012', {
-    setup: function(){
-        /*
-            Tests start with picker on March 31, 2012.  Fun facts:
-
-            * February 1, 2012 was on a Wednesday
-            * February 29, 2012 was on a Wednesday
-            * March 1, 2012 was on a Thursday
-            * March 31, 2012 was on a Saturday
-        */
-        this.input = $('<input type="text" value="31-03-2012">')
-                        .appendTo('#qunit-fixture')
-                        .datepicker({format: "dd-mm-yyyy"})
-                        .focus(); // Activate for visibility checks
-        this.dp = this.input.data('datepicker')
-        this.picker = this.dp.picker;
-    },
-    teardown: function(){
-        this.picker.remove();
-    }
-});
-
-
-test('by day (right/left arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 day, left arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
-    datesEqual(this.dp.date, new Date(2012, 2, 30));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: +1 day, right arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 39
-        });
-    datesEqual(this.dp.viewDate, new Date(2012, 3, 1));
-    datesEqual(this.dp.date, new Date(2012, 3, 1));
-    // Month changed: April 1 (this is not a joke!)
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'April 2012', 'Title is "April 2012"');
-});
-
-test('by week (up/down arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 week, up arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 38
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 24));
-    datesEqual(this.dp.date, new Date(2012, 2, 24));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: +1 week, down arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 40
-        });
-    datesEqual(this.dp.viewDate, new Date(2012, 3, 7));
-    datesEqual(this.dp.date, new Date(2012, 3, 7));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'April 2012', 'Title is "April 2012"');
-});
-
-test('by month, v1 (shift + left/right arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 month, shift + left arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37,
-        shiftKey: true
-    });
-    // Both updated on keyboard navigation, w/ graceful date ends
-    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
-    datesEqual(this.dp.date, new Date(2012, 1, 29));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'February 2012', 'Title is "February 2012"');
-
-    // Navigation: +1 month, shift + right arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 39,
-            shiftKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2012, 3, 29));
-    datesEqual(this.dp.date, new Date(2012, 3, 29));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'April 2012', 'Title is "April 2012"');
-});
-
-test('by month, v2 (shift + up/down arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 month, shift + up arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 38,
-        shiftKey: true
-    });
-    // Both updated on keyboard navigation, w/ graceful date ends
-    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
-    datesEqual(this.dp.date, new Date(2012, 1, 29));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'February 2012', 'Title is "February 2012"');
-
-    // Navigation: +1 month, shift + down arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 40,
-            shiftKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2012, 3, 29));
-    datesEqual(this.dp.date, new Date(2012, 3, 29));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'April 2012', 'Title is "April 2012"');
-});
-
-test('by year, v1 (ctrl + left/right arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 year, ctrl + left arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37,
-        ctrlKey: true
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
-    datesEqual(this.dp.date, new Date(2011, 2, 31));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2011', 'Title is "March 2011"');
-
-    // Navigation: +1 year, ctrl + right arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 39,
-            ctrlKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
-    datesEqual(this.dp.date, new Date(2013, 2, 31));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2013', 'Title is "March 2013"');
-});
-
-test('by year, v2 (ctrl + up/down arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 year, ctrl + up arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 38,
-        ctrlKey: true
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
-    datesEqual(this.dp.date, new Date(2011, 2, 31));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2011', 'Title is "March 2011"');
-
-    // Navigation: +1 year, ctrl + down arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 40,
-            ctrlKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
-    datesEqual(this.dp.date, new Date(2013, 2, 31));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2013', 'Title is "March 2013"');
-});
-
-test('by year, v3 (ctrl + shift + left/right arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 year, ctrl + left arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37,
-        ctrlKey: true,
-        shiftKey: true
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
-    datesEqual(this.dp.date, new Date(2011, 2, 31));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2011', 'Title is "March 2011"');
-
-    // Navigation: +1 year, ctrl + right arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 39,
-            ctrlKey: true,
-            shiftKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
-    datesEqual(this.dp.date, new Date(2013, 2, 31));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2013', 'Title is "March 2013"');
-});
-
-test('by year, v4 (ctrl + shift + up/down arrows)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 year, ctrl + up arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 38,
-        ctrlKey: true,
-        shiftKey: true
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
-    datesEqual(this.dp.date, new Date(2011, 2, 31));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2011', 'Title is "March 2011"');
-
-    // Navigation: +1 year, ctrl + down arrow key
-    for (var i=0; i<2; i++)
-        this.input.trigger({
-            type: 'keydown',
-            keyCode: 40,
-            ctrlKey: true,
-            shiftKey: true
-        });
-    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
-    datesEqual(this.dp.date, new Date(2013, 2, 31));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2013', 'Title is "March 2013"');
-});
-
-test('by year, from leap day', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-
-    this.input.val('29-02-2012').datepicker('update');
-    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
-    datesEqual(this.dp.date, new Date(2012, 1, 29));
-    equal(target.text(), 'February 2012', 'Title is "February 2012"');
-
-    // Navigation: -1 year
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37,
-        ctrlKey: true
-    });
-    // Both updated on keyboard navigation; graceful month-end
-    datesEqual(this.dp.viewDate, new Date(2011, 1, 28));
-    datesEqual(this.dp.date, new Date(2011, 1, 28));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'February 2011', 'Title is "February 2011"');
-
-    // Navigation: +1 year, back to leap year
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 39,
-        ctrlKey: true
-    });
-    // Both updated on keyboard navigation; graceful month-end
-    datesEqual(this.dp.viewDate, new Date(2012, 1, 28));
-    datesEqual(this.dp.date, new Date(2012, 1, 28));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'February 2012', 'Title is "February 2012"');
-
-    // Navigation: +1 year
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 39,
-        ctrlKey: true
-    });
-    // Both updated on keyboard navigation; graceful month-end
-    datesEqual(this.dp.viewDate, new Date(2013, 1, 28));
-    datesEqual(this.dp.date, new Date(2013, 1, 28));
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'February 2013', 'Title is "February 2013"');
-});
-
-test('Selection (enter)', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Navigation: -1 day, left arrow key
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
-    datesEqual(this.dp.date, new Date(2012, 2, 30));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    // Selection: Enter
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 13
-    });
-    // Both updated on keyboard navigation
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
-    datesEqual(this.dp.date, new Date(2012, 2, 30));
-    // Month not changed
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
-});
-
-test('Toggle hide/show (escape); navigation while hidden is suppressed', function(){
-    var target;
-
-    equal(this.dp.viewMode, 0);
-    target = this.picker.find('.datepicker-days thead th.switch');
-    equal(target.text(), 'March 2012', 'Title is "March 2012"');
-
-    ok(this.picker.is(':visible'), 'Picker is visible');
-
-    // Hide
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 27
-    });
-
-    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
-    datesEqual(this.dp.date, new Date(2012, 2, 31));
-
-    // left arrow key, *doesn't* navigate
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 37
-    });
-
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
-    datesEqual(this.dp.date, new Date(2012, 2, 31));
-
-    // Show
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 27
-    });
-
-    ok(this.picker.is(':visible'), 'Picker is visible');
-    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
-    datesEqual(this.dp.date, new Date(2012, 2, 31));
-});
-
+module('Keyboard Navigation 2012', {
+    setup: function(){
+        /*
+            Tests start with picker on March 31, 2012.  Fun facts:
+
+            * February 1, 2012 was on a Wednesday
+            * February 29, 2012 was on a Wednesday
+            * March 1, 2012 was on a Thursday
+            * March 31, 2012 was on a Saturday
+        */
+        this.input = $('<input type="text" value="31-03-2012">')
+                        .appendTo('#qunit-fixture')
+                        .datepicker({format: "dd-mm-yyyy"})
+                        .focus(); // Activate for visibility checks
+        this.dp = this.input.data('datepicker')
+        this.picker = this.dp.picker;
+    },
+    teardown: function(){
+        this.picker.remove();
+    }
+});
+
+
+test('by day (right/left arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 day, left arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
+    datesEqual(this.dp.date, new Date(2012, 2, 30));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: +1 day, right arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 39
+        });
+    datesEqual(this.dp.viewDate, new Date(2012, 3, 1));
+    datesEqual(this.dp.date, new Date(2012, 3, 1));
+    // Month changed: April 1 (this is not a joke!)
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'April 2012', 'Title is "April 2012"');
+});
+
+test('by week (up/down arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 week, up arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 38
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 24));
+    datesEqual(this.dp.date, new Date(2012, 2, 24));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: +1 week, down arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 40
+        });
+    datesEqual(this.dp.viewDate, new Date(2012, 3, 7));
+    datesEqual(this.dp.date, new Date(2012, 3, 7));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'April 2012', 'Title is "April 2012"');
+});
+
+test('by month, v1 (shift + left/right arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 month, shift + left arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37,
+        shiftKey: true
+    });
+    // Both updated on keyboard navigation, w/ graceful date ends
+    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
+    datesEqual(this.dp.date, new Date(2012, 1, 29));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'February 2012', 'Title is "February 2012"');
+
+    // Navigation: +1 month, shift + right arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 39,
+            shiftKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2012, 3, 29));
+    datesEqual(this.dp.date, new Date(2012, 3, 29));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'April 2012', 'Title is "April 2012"');
+});
+
+test('by month, v2 (shift + up/down arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 month, shift + up arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 38,
+        shiftKey: true
+    });
+    // Both updated on keyboard navigation, w/ graceful date ends
+    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
+    datesEqual(this.dp.date, new Date(2012, 1, 29));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'February 2012', 'Title is "February 2012"');
+
+    // Navigation: +1 month, shift + down arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 40,
+            shiftKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2012, 3, 29));
+    datesEqual(this.dp.date, new Date(2012, 3, 29));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'April 2012', 'Title is "April 2012"');
+});
+
+test('by year, v1 (ctrl + left/right arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 year, ctrl + left arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37,
+        ctrlKey: true
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
+    datesEqual(this.dp.date, new Date(2011, 2, 31));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2011', 'Title is "March 2011"');
+
+    // Navigation: +1 year, ctrl + right arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 39,
+            ctrlKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
+    datesEqual(this.dp.date, new Date(2013, 2, 31));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2013', 'Title is "March 2013"');
+});
+
+test('by year, v2 (ctrl + up/down arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 year, ctrl + up arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 38,
+        ctrlKey: true
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
+    datesEqual(this.dp.date, new Date(2011, 2, 31));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2011', 'Title is "March 2011"');
+
+    // Navigation: +1 year, ctrl + down arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 40,
+            ctrlKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
+    datesEqual(this.dp.date, new Date(2013, 2, 31));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2013', 'Title is "March 2013"');
+});
+
+test('by year, v3 (ctrl + shift + left/right arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 year, ctrl + left arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37,
+        ctrlKey: true,
+        shiftKey: true
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
+    datesEqual(this.dp.date, new Date(2011, 2, 31));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2011', 'Title is "March 2011"');
+
+    // Navigation: +1 year, ctrl + right arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 39,
+            ctrlKey: true,
+            shiftKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
+    datesEqual(this.dp.date, new Date(2013, 2, 31));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2013', 'Title is "March 2013"');
+});
+
+test('by year, v4 (ctrl + shift + up/down arrows)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 year, ctrl + up arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 38,
+        ctrlKey: true,
+        shiftKey: true
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2011, 2, 31));
+    datesEqual(this.dp.date, new Date(2011, 2, 31));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2011', 'Title is "March 2011"');
+
+    // Navigation: +1 year, ctrl + down arrow key
+    for (var i=0; i<2; i++)
+        this.input.trigger({
+            type: 'keydown',
+            keyCode: 40,
+            ctrlKey: true,
+            shiftKey: true
+        });
+    datesEqual(this.dp.viewDate, new Date(2013, 2, 31));
+    datesEqual(this.dp.date, new Date(2013, 2, 31));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2013', 'Title is "March 2013"');
+});
+
+test('by year, from leap day', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+
+    this.input.val('29-02-2012').datepicker('update');
+    datesEqual(this.dp.viewDate, new Date(2012, 1, 29));
+    datesEqual(this.dp.date, new Date(2012, 1, 29));
+    equal(target.text(), 'February 2012', 'Title is "February 2012"');
+
+    // Navigation: -1 year
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37,
+        ctrlKey: true
+    });
+    // Both updated on keyboard navigation; graceful month-end
+    datesEqual(this.dp.viewDate, new Date(2011, 1, 28));
+    datesEqual(this.dp.date, new Date(2011, 1, 28));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'February 2011', 'Title is "February 2011"');
+
+    // Navigation: +1 year, back to leap year
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 39,
+        ctrlKey: true
+    });
+    // Both updated on keyboard navigation; graceful month-end
+    datesEqual(this.dp.viewDate, new Date(2012, 1, 28));
+    datesEqual(this.dp.date, new Date(2012, 1, 28));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'February 2012', 'Title is "February 2012"');
+
+    // Navigation: +1 year
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 39,
+        ctrlKey: true
+    });
+    // Both updated on keyboard navigation; graceful month-end
+    datesEqual(this.dp.viewDate, new Date(2013, 1, 28));
+    datesEqual(this.dp.date, new Date(2013, 1, 28));
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'February 2013', 'Title is "February 2013"');
+});
+
+test('Selection (enter)', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Navigation: -1 day, left arrow key
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
+    datesEqual(this.dp.date, new Date(2012, 2, 30));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    // Selection: Enter
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 13
+    });
+    // Both updated on keyboard navigation
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 30));
+    datesEqual(this.dp.date, new Date(2012, 2, 30));
+    // Month not changed
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
+});
+
+test('Toggle hide/show (escape); navigation while hidden is suppressed', function(){
+    var target;
+
+    equal(this.dp.viewMode, 0);
+    target = this.picker.find('.datepicker-days thead th.switch');
+    equal(target.text(), 'March 2012', 'Title is "March 2012"');
+
+    ok(this.picker.is(':visible'), 'Picker is visible');
+
+    // Hide
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 27
+    });
+
+    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
+    datesEqual(this.dp.date, new Date(2012, 2, 31));
+
+    // left arrow key, *doesn't* navigate
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 37
+    });
+
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
+    datesEqual(this.dp.date, new Date(2012, 2, 31));
+
+    // Show
+    this.input.trigger({
+        type: 'keydown',
+        keyCode: 27
+    });
+
+    ok(this.picker.is(':visible'), 'Picker is visible');
+    datesEqual(this.dp.viewDate, new Date(2012, 2, 31));
+    datesEqual(this.dp.date, new Date(2012, 2, 31));
+});
+
+test('Blur hides picker', function(){
+    var target;
+
+    ok(this.picker.is(':visible'), 'Picker is visible');
+    this.input.blur();
+    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
+});
diff --git a/tests/suites/keyboard_navigation/all.js b/tests/suites/keyboard_navigation/all.js
deleted file mode 100644
index 5811826..0000000
--- a/tests/suites/keyboard_navigation/all.js
+++ /dev/null
@@ -1,26 +0,0 @@
-module('Keyboard Navigation (All)', {
-    setup: function(){
-        this.input = $('<input type="text">')
-                        .appendTo('#qunit-fixture')
-                        .datepicker({format: "dd-mm-yyyy"})
-                        .focus(); // Activate for visibility checks
-        this.dp = this.input.data('datepicker')
-        this.picker = this.dp.picker;
-    },
-    teardown: function(){
-        this.picker.remove();
-    }
-});
-
-test('TAB hides picker', function(){
-    var target;
-
-    ok(this.picker.is(':visible'), 'Picker is visible');
-    
-    this.input.trigger({
-        type: 'keydown',
-        keyCode: 9
-    });
-
-    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
-});
diff --git a/tests/suites/mouse_navigation/all.js b/tests/suites/mouse_navigation/all.js
deleted file mode 100644
index 2ddf75c..0000000
--- a/tests/suites/mouse_navigation/all.js
+++ /dev/null
@@ -1,33 +0,0 @@
-module('Mouse Navigation (All)', {
-    setup: function(){
-        this.input = $('<input type="text">')
-                        .appendTo('#qunit-fixture')
-                        .datepicker({format: "dd-mm-yyyy"})
-                        .focus(); // Activate for visibility checks
-        this.dp = this.input.data('datepicker')
-        this.picker = this.dp.picker;
-    },
-    teardown: function(){
-        this.picker.remove();
-    }
-});
-
-test('Clicking datepicker does not hide datepicker', function(){
-    ok(this.picker.is(':visible'), 'Picker is visible');    
-    this.picker.trigger('mousedown');
-    ok(this.picker.is(':visible'), 'Picker is still visible');
-});
-
-test('Clicking outside datepicker hides datepicker', function(){   
-    var $otherelement = $('<div />');
-    $('body').append($otherelement); 
-
-    ok(this.picker.is(':visible'), 'Picker is visible');   
-    this.input.trigger('click');         
-    ok(this.picker.is(':visible'), 'Picker is still visible');    
-
-    $otherelement.trigger('mousedown');
-    ok(this.picker.is(':not(:visible)'), 'Picker is hidden');
-
-    $otherelement.remove();
-});
\ No newline at end of file
diff --git a/tests/tests.html b/tests/tests.html
index 8eb1450..9884219 100644
--- a/tests/tests.html
+++ b/tests/tests.html
@@ -1,45 +1,43 @@
-<!DOCTYPE html>
-<html>
-    <head>
-        <link rel="stylesheet" href="assets/qunit.css" />
-        <script src="assets/qunit.js"></script>
-        <script src="assets/qunit-logging.js"></script> <!-- console.log for test failures -->
-        <script src="assets/coverage.js"></script>
-        <script src="assets/jquery-1.7.1.min.js"></script>
-        <script src="../js/bootstrap-datepicker.js"></script>
-
-        <style>
-            .datepicker {
-                /* Appended to body, abs-pos off the page */
-                position: absolute;
-                display: none;
-                top: -9999em;
-                left: -9999em;
-            }
-        </style>
-
-        <!-- Utilities -->
-        <script src="assets/utils.js"></script>
-        <script src="assets/mock.js"></script>
-
-        <!-- Test suites -->
-        <script src="suites/formats.js"></script>
-        <script src="suites/mouse_navigation/all.js"></script>
-        <script src="suites/mouse_navigation/2012.js"></script>
-        <script src="suites/mouse_navigation/2011.js"></script>
-        <script src="suites/keyboard_navigation/all.js"></script>
-        <script src="suites/keyboard_navigation/2012.js"></script>
-        <script src="suites/keyboard_navigation/2011.js"></script>
-        <script src="suites/component.js"></script>
-        <script src="suites/events.js"></script>
-        <script src="suites/options.js"></script>
-    </head>
-    <body>
-        <h1 id="qunit-header">bootstrap-datepicker</h1>
-        <h2 id="qunit-banner"></h2>
-        <div id="qunit-testrunner-toolbar"></div>
-        <h2 id="qunit-userAgent"></h2>
-        <ol id="qunit-tests"></ol>
-        <div id="qunit-fixture"></div>
-    </body>
+<!DOCTYPE html>
+<html>
+    <head>
+        <link rel="stylesheet" href="assets/qunit.css" />
+        <script src="assets/qunit.js"></script>
+        <script src="assets/qunit-logging.js"></script> <!-- console.log for test failures -->
+        <script src="assets/coverage.js"></script>
+        <script src="assets/jquery-1.7.1.min.js"></script>
+        <script src="../js/bootstrap-datepicker.js"></script>
+
+        <style>
+            .datepicker {
+                /* Appended to body, abs-pos off the page */
+                position: absolute;
+                display: none;
+                top: -9999em;
+                left: -9999em;
+            }
+        </style>
+
+        <!-- Utilities -->
+        <script src="assets/utils.js"></script>
+        <script src="assets/mock.js"></script>
+
+        <!-- Test suites -->
+        <script src="suites/formats.js"></script>
+        <script src="suites/mouse_navigation/2012.js"></script>
+        <script src="suites/mouse_navigation/2011.js"></script>
+        <script src="suites/keyboard_navigation/2012.js"></script>
+        <script src="suites/keyboard_navigation/2011.js"></script>
+        <script src="suites/component.js"></script>
+        <script src="suites/events.js"></script>
+        <script src="suites/options.js"></script>
+    </head>
+    <body>
+        <h1 id="qunit-header">bootstrap-datepicker</h1>
+        <h2 id="qunit-banner"></h2>
+        <div id="qunit-testrunner-toolbar"></div>
+        <h2 id="qunit-userAgent"></h2>
+        <ol id="qunit-tests"></ol>
+        <div id="qunit-fixture"></div>
+    </body>
 </html>
\ No newline at end of file
